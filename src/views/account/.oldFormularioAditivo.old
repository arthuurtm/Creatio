<template>

    <div v-if="currentStep === 1" key="step1">
        <div class="formStep" data-step="1">
            <div class="sepElements">
                <label for="nickname">Nome de Exibição</label>
                <input
                    id="nickname"
                    class="input"
                    type="text"
                    v-model="nickname"
                    placeholder="Um nome criativo"
                    autofocus
                />
                <label for="username">Nome de Usuário</label>
                <input
                    id="username"
                    class="input"
                    type="text"
                    v-model="username"
                    placeholder="Seu nome de usuário"
                    required
                />
            </div>
        </div>
    </div>

    <div v-if="currentStep === 2" key="step2">
        <div class="formStep" data-step="2">
            <div class="sepElements">
                <label for="email">E-mail</label>
                <input
                    id="email"
                    class="input"
                    type="email"
                    v-model="email"
                    placeholder="Seu e-mail"
                    autofocus
                    required
                />
                <label for="birthdate">Data de Nascimento</label>
                <input
                    id="birthdate"
                    class="input date"
                    type="date"
                    v-model="birthdate"
                    placeholder="Sua data de nascimento"
                    required
                />
            </div>
        </div>
    </div>

    <div v-if="currentStep === 3" key="step3">
        <div class="formStep" data-step="3">
            <div class="sepElements">
                <label for="verifyCode">Código de Verificação</label>
                <input
                    id="verifyCode"
                    class="input"
                    type="text"
                    v-model="verifyCode"
                    placeholder="Código recebido no e-mail"
                    autofocus
                    required
                />
            </div>
        </div>
    </div>

    <div v-if="currentStep === 4" key="step4">
        <div class="formStep" data-step="4">
            <div class="sepElements">
                <label for="psswd1">Senha</label>
                <input
                    id="psswd1"
                    class="input"
                    type="password"
                    v-model="psswd1"
                    placeholder="Uma senha BEM segura"
                    autofocus
                    required
                />
                <label for="psswd2">Confirme a senha</label>
                <input
                    id="psswd2"
                    class="input"
                    type="password"
                    v-model="psswd2"
                    placeholder="Confirme sua senha"
                    required
                />
            </div>
        </div>
    </div>

    <div v-if="currentStep === 0">
        <div class="formStep" data-step="0">
            <div class="sepElements">
                <p>{{ informationMessage }}</p>
            </div>
        </div>
    </div>
</template>

<script ref="childComponent">
export default {
    name: 'Signup',

    props: {
        currentStep: {
            type: Number,
            required: true
        }
    },

    emits:[
        'updateFormConfig',
    ],

    mounted() {
        console.log('Componente Signup Carregado!')
        this.updateFormConfig();
    },

    data() {
        return {
            nickname: '',
            username: '',
            email: '',
            birthdate: '',
            verifyCode: '',
            psswd1: '',
            psswd2: '',
            sentCode: false,
            informationMessage: '',
        }
    },

    watch: {
        nickname(newNickname) {
            this.username = newNickname
                .toLowerCase()
                .replace(/[^a-z0-9_.]/g, '')
                .replace(/\s+/g, '');
        },

        formTitle(newTitle) {
            this.updateFormConfig();
        },

        buttons(newButtons) {
            this.updateFormConfig();
        },

        currentStep(newStep) {
            console.log('O passo atual mudou para:', newStep);
        },
    },

    methods: {

        updateFormConfig() {
            const formConfig = {
                title: 'Criar Conta',
                buttons: {
                    0: [
                        { text: 'Sair', class: 'btn cancel', type: 'submit', action: 'back' },
                        { text: 'Tentar Novamente', class: 'btn confirm', type: 'submit', action: 'forward' }
                    ],
                    1: [
                        { text: 'Cancelar', class: 'btn destructive', type: 'button', action: 'back' },
                        { text: 'Próximo', class: 'btn confirm', type: 'submit', action: 'forward' }
                    ],
                    2: [
                        { text: 'Voltar', class: 'btn', type: 'button', action: 'lback' },
                        { text: 'Próximo', class: 'btn confirm', type: 'submit', action: 'forward' }
                    ],
                    3: [
                        { text: 'Voltar', class: 'btn', type: 'button', action: 'lback' },
                        { text: 'Próximo', class: 'btn confirm', type: 'submit', action: 'forward' }
                    ],
                    4: [
                        { text: 'Voltar', class: 'btn', type: 'button', action: 'lback' },
                        { text: 'Cadastrar', class: 'btn confirm', type: 'submit', action: 'forward' }
                    ]
                }
            };
            this.$emit('updateFormConfig', formConfig);
        },

        async executeStep(value) {

            switch(value) {

                case 0:
                    window.location.reload();
                    break;

                case 1:
                    return true;
                    break;

                case 2:
                if (!this.sentCode) {
                    this.isLoading = true;
                    try {
                        const res = await fetch(this.$globalFunc.getApiUrl('database', 'signup-generate-code'), {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ email: this.email }),
                        });
                        if (res.ok) {
                            this.sentCode = true;
                            return true;
                        } else {
                            const errorData = await res.json();
                            this.$parent.errorMessage = `${errorData.message}`;
                        }
                    } catch (error) {
                        console.error("Erro:", error);
                        this.informationMessage = "Erro interno. Tente novamente mais tarde.";
                        return 0;
                    } finally {
                        this.isLoading = false;
                    }
                } else {
                    return true;
                }
                break;

                case 3:
                    break;

                case 4:
                    try {
                        if (this.psswd1 !== this.psswd2) {
                            this.$parent.errorMessage = "As senhas não coincidem.";
                            return;
                        }
                        
                        this.isLoading = true;
                        const response = await fetch(this.$globalFunc.getApiUrl('database', 'signup'), {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                nickname: this.nickname,
                                username: this.username,
                                email: this.email,
                                birthdate: this.birthdate,
                                password: this.psswd1,
                                verificationCode: this.verifyCode,
                            }),
                        });

                        if (response.ok) {
                            this.informationMessage = "Conta criada com sucesso! Agora, faça login.";
                            this.buttons[0] = [
                                { text: 'Ok', class: 'btn confirm', type: 'submit', action: 'back' }
                            ];
                            return 0;
                        } else {
                            const errorData = await response.json();
                            if (errorData.errCode === 'invalidCode') {
                                return 3;
                            } else if (errorData.errCode === 'invalidBirthdate') {
                                return 2;
                            } else if (errorData.errCode === 'usernameExists') {
                                return 1;
                            }
                            this.$parent.errorMessage = `${errorData.message}`;
                        }
                    } catch (error) {
                        console.error("Erro:", error);
                        this.informationMessage = "Erro interno. Tente novamente mais tarde.";
                        return 0;
                    } finally {
                        this.isLoading = false;
                    }
                    break;
            }
        }
    },
}
</script>